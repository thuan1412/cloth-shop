{"version":3,"sources":["components/menu-item/menu-item.jsx","components/directory/directory.component.jsx","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","title","imageUrl","size","linkUrl","history","match","className","onClick","push","url","style","backgroundImage","toUpperCase","Directory","state","sections","id","this","map","otherSectionProps","key","Component","HomePage","HatsPage","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById"],"mappings":"8WAqBeA,G,MAAAA,aAhBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,KAAMC,EAA1B,EAA0BA,QAASC,EAAnC,EAAmCA,QAASC,EAA5C,EAA4CA,MAA5C,OACf,yBAAKC,UAAS,UAAKJ,EAAL,cAAuBK,QAAS,kBAAMH,EAAQI,KAAR,UAAgBH,EAAMI,KAAtB,OAA4BN,MAC9E,yBACEO,MAAO,CACLC,gBAAgB,OAAD,OAASV,EAAT,MAEjBK,UAAU,qBAGZ,yBAAKA,UAAU,WACb,wBAAIA,UAAU,SAASN,EAAMY,eAC7B,0BAAMN,UAAU,YAAhB,kBC2CSO,G,wDApDX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,SAAU,CACN,CACIf,MAAO,OACPC,SAAU,oCACVe,GAAI,EACJb,QAAS,aAEb,CACIH,MAAO,UACPC,SAAU,uCACVe,GAAI,EACJb,QAAS,gBAEb,CACIH,MAAO,WACPC,SAAU,wCACVe,GAAI,EACJb,QAAS,iBAEb,CACIH,MAAO,SACPC,SAAU,sCACVC,KAAM,QACNc,GAAI,EACJb,QAAS,eAEb,CACIH,MAAO,OACPC,SAAU,mCACVC,KAAM,QACNc,GAAI,EACJb,QAAS,eAlCX,E,qDAwCV,OACI,yBAAKG,UAAU,kBAEPW,KAAKH,MAAMC,SAASG,KAAI,gBAAGF,EAAH,EAAGA,GAAOG,EAAV,6BACpB,kBAAC,EAAD,eAAUC,IAAKJ,GAAQG,Y,GA7CvBE,cCOTC,G,MAPE,WACf,OACE,yBAAKhB,UAAU,YACb,kBAAC,EAAD,SCFAiB,EAAW,kBACf,6BACE,2CAeWC,MAXf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,QAAQC,UAAWJ,OCNzBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1B,MACvB,2DCTN2B,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d949b235.chunk.js","sourcesContent":["import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport './menu-item.styles.scss';\n\nconst MenuItem = ({ title, imageUrl, size, linkUrl, history, match}) => (\n  <div className={`${size} menu-item`} onClick={() => history.push(`${match.url}${linkUrl}`)}>\n    <div\n      style={{\n        backgroundImage: `url(${imageUrl})`\n      }}\n      className='background-image'>\n    </div>\n\n    <div className='content'>\n      <h1 className='title'>{title.toUpperCase()}</h1>\n      <span className='subtitle'>SHOP NOW</span>\n    </div>\n  </div>\n);\n\nexport default withRouter(MenuItem);","import React, { Component } from 'react';\n\nimport MenuItem from '../menu-item/menu-item'\n\nimport './directory.styles.scss';\n\nclass Directory extends Component {\n    constructor() {\n        super();\n        this.state = {\n            sections: [\n                {\n                    title: 'hats',\n                    imageUrl: 'https://i.ibb.co/cvpntL1/hats.png',\n                    id: 1,\n                    linkUrl: 'shop/hats'\n                },\n                {\n                    title: 'jackets',\n                    imageUrl: 'https://i.ibb.co/px2tCc3/jackets.png',\n                    id: 2,\n                    linkUrl: 'shop/jackets'\n                },\n                {\n                    title: 'sneakers',\n                    imageUrl: 'https://i.ibb.co/0jqHpnp/sneakers.png',\n                    id: 3,\n                    linkUrl: 'shop/sneakers'\n                },\n                {\n                    title: 'womens',\n                    imageUrl: 'https://i.ibb.co/GCCdy8t/womens.png',\n                    size: 'large',\n                    id: 4,\n                    linkUrl: 'shop/womens'\n                },\n                {\n                    title: 'mens',\n                    imageUrl: 'https://i.ibb.co/R70vBrQ/men.png',\n                    size: 'large',\n                    id: 5,\n                    linkUrl: 'shop/mens'\n                }\n            ]\n        };\n    }\n    render() {\n        return (\n            <div className=\"directory-menu\">\n                {\n                    this.state.sections.map(({ id, ...otherSectionProps }) => (\n                        <MenuItem key={id} {...otherSectionProps} />\n                    ))\n                }\n            </div>\n        )\n    }\n}\n\nexport default Directory;","import React from 'react';\n\nimport Directory from '../../components/directory/directory.component';\n\nimport './homepage.styles.scss'\n\nconst HomePage = () => {\n  return (\n    <div className=\"homepage\">\n      <Directory />\n    </div>)\n}\n\nexport default HomePage;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\n\nimport './App.css';\n\nimport HomePage from './pages/homepage/homepage.component';\n\nconst HatsPage = () => (\n  <div>\n    <h1>Hats Page</h1>\n  </div>\n);\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path='/' component={HomePage}></Route>\n        <Route exact path='/hats' component={HatsPage}></Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}